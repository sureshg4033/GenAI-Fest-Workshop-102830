name: "Terraform CI/CD Pipeline"

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.tf'
      - '.github/workflows/terraform-cicd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.tf'
      - '.github/workflows/terraform-cicd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  TF_LOG: INFO
  AWS_REGION: 'us-east-1'  # Default region, can be overridden in environment configs

jobs:
  terraform-validate:
    name: "Terraform Validation"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init - Bootstrap
        id: init-bootstrap
        run: |
          cd bootstrap
          terraform init -backend=false

      - name: Terraform Validate - Bootstrap
        id: validate-bootstrap
        run: |
          cd bootstrap
          terraform validate

      - name: Terraform Init - Dev
        id: init-dev
        run: |
          cd environments/dev
          terraform init -backend=false

      - name: Terraform Validate - Dev
        id: validate-dev
        run: |
          cd environments/dev
          terraform validate

      - name: Terraform Init - Staging
        id: init-staging
        run: |
          cd environments/staging
          terraform init -backend=false

      - name: Terraform Validate - Staging
        id: validate-staging
        run: |
          cd environments/staging
          terraform validate

      - name: Report Validation Results
        if: always()
        run: |
          echo "Terraform Format Check: ${{ steps.fmt.outcome }}"
          echo "Bootstrap Validation: ${{ steps.validate-bootstrap.outcome }}"
          echo "Dev Validation: ${{ steps.validate-dev.outcome }}"
          echo "Staging Validation: ${{ steps.validate-staging.outcome }}"

  terraform-security:
    name: "Terraform Security Scan"
    runs-on: ubuntu-latest
    needs: terraform-validate
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          soft_fail: true

  terraform-unit-tests:
    name: "Terraform Unit Tests"
    runs-on: ubuntu-latest
    needs: terraform-validate
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Create Test Directory
        run: mkdir -p tests

      - name: Create Basic Test File
        run: |
          cat > tests/terraform_test.go << 'EOL'
          package test

          import (
            "testing"
            "github.com/gruntwork-io/terratest/modules/terraform"
            "github.com/stretchr/testify/assert"
          )

          func TestTerraformBootstrap(t *testing.T) {
            terraformOptions := terraform.WithDefaultRetryableErrors(t, &terraform.Options{
              TerraformDir: "../bootstrap",
              NoColor:      true,
            })

            // Run terraform init and terraform plan
            terraform.Init(t, terraformOptions)
            planOutput := terraform.Plan(t, terraformOptions)
            
            // Verify the plan output contains expected resources
            assert.Contains(t, planOutput, "aws_s3_bucket.terraform_state")
            assert.Contains(t, planOutput, "aws_dynamodb_table.terraform_locks")
          }

          func TestTerraformDevEnvironment(t *testing.T) {
            terraformOptions := terraform.WithDefaultRetryableErrors(t, &terraform.Options{
              TerraformDir: "../environments/dev",
              NoColor:      true,
            })

            // Run terraform init and terraform plan
            terraform.Init(t, terraformOptions)
            planOutput := terraform.Plan(t, terraformOptions)
            
            // Verify the plan output contains expected resources
            assert.Contains(t, planOutput, "module.networking")
            assert.Contains(t, planOutput, "module.compute")
          }
          EOL

      - name: Install Terratest Dependencies
        run: |
          cd tests
          go mod init terraform-tests
          go get github.com/gruntwork-io/terratest/modules/terraform
          go get github.com/stretchr/testify/assert
          go mod tidy

      - name: Run Terratest Tests
        run: |
          cd tests
          go test -v -timeout 30m

  terraform-plan-dev:
    name: "Terraform Plan - Dev"
    runs-on: ubuntu-latest
    needs: [terraform-security, terraform-unit-tests]
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: dev
    env:
      TF_WORKSPACE: dev
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Terraform Init - Bootstrap
        id: init-bootstrap
        run: |
          cd bootstrap
          terraform init

      - name: Terraform Plan - Bootstrap
        id: plan-bootstrap
        run: |
          cd bootstrap
          terraform plan -out=tfplan
        continue-on-error: true

      - name: Terraform Init - Dev
        id: init-dev
        run: |
          cd environments/dev
          terraform init

      - name: Terraform Plan - Dev
        id: plan-dev
        run: |
          cd environments/dev
          terraform plan -out=tfplan
        continue-on-error: true

      - name: Upload Terraform Plan - Dev
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-dev
          path: environments/dev/tfplan
          retention-days: 5

      - name: Comment Plan on PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const bootstrapOutput = `${{ steps.plan-bootstrap.outputs.stdout || 'No changes for bootstrap' }}`;
            const devOutput = `${{ steps.plan-dev.outputs.stdout || 'No changes for dev environment' }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Results 📝\n
              ### Bootstrap Plan:
              \`\`\`terraform\n${bootstrapOutput}\n\`\`\`
              
              ### Dev Environment Plan:
              \`\`\`terraform\n${devOutput}\n\`\`\`
              `
            });

  terraform-plan-staging:
    name: "Terraform Plan - Staging"
    runs-on: ubuntu-latest
    needs: [terraform-security, terraform-unit-tests]
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    env:
      TF_WORKSPACE: staging
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Terraform Init - Staging
        id: init-staging
        run: |
          cd environments/staging
          terraform init

      - name: Terraform Plan - Staging
        id: plan-staging
        run: |
          cd environments/staging
          terraform plan -out=tfplan
        continue-on-error: true

      - name: Upload Terraform Plan - Staging
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-staging
          path: environments/staging/tfplan
          retention-days: 5

      - name: Comment Plan on PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const stagingOutput = `${{ steps.plan-staging.outputs.stdout || 'No changes for staging environment' }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Results - Staging 📝\n
              \`\`\`terraform\n${stagingOutput}\n\`\`\`
              `
            });

  terraform-apply-dev:
    name: "Terraform Apply - Dev"
    runs-on: ubuntu-latest
    needs: terraform-plan-dev
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment:
      name: dev
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    env:
      TF_WORKSPACE: dev
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Download Terraform Plan - Dev
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-dev
          path: environments/dev

      - name: Terraform Init - Bootstrap
        run: |
          cd bootstrap
          terraform init

      - name: Terraform Apply - Bootstrap
        run: |
          cd bootstrap
          terraform apply -auto-approve

      - name: Terraform Init - Dev
        run: |
          cd environments/dev
          terraform init

      - name: Terraform Apply - Dev
        run: |
          cd environments/dev
          terraform apply -auto-approve tfplan

  terraform-apply-staging:
    name: "Terraform Apply - Staging"
    runs-on: ubuntu-latest
    needs: terraform-plan-staging
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    env:
      TF_WORKSPACE: staging
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Download Terraform Plan - Staging
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-staging
          path: environments/staging

      - name: Terraform Init - Bootstrap
        run: |
          cd bootstrap
          terraform init

      - name: Terraform Apply - Bootstrap
        run: |
          cd bootstrap
          terraform apply -auto-approve

      - name: Terraform Init - Staging
        run: |
          cd environments/staging
          terraform init

      - name: Terraform Apply - Staging
        run: |
          cd environments/staging
          terraform apply -auto-approve tfplan